colnames(mydist) <- c("UserName", "mean_beta_div")
}
tax_dist <- as.data.frame(mydist)
tax_dist <- droplevels(tax_dist)
tax_dist$mean_beta_div <- as.character(tax_dist$mean_beta_div)
tax_dist$mean_beta_div <- as.numeric(tax_dist$mean_beta_div)
tax_dist$mean_beta_div <- 1/tax_dist$mean_beta_div
# Get average microbiome distance to self
# This will also be used to order the plot
micro_order <- tax_dist %>%
group_by(UserName) %>%
dplyr::summarise(ave_cloud = median(mean_beta_div, na.rm=T)) # ave_cloud is inverse variability = stability
food_order <- food_dist %>%
group_by(UserName) %>%
dplyr::summarise(med_food_dist = median(food_mean_beta_div, na.rm = T))
# food diversity
# load food alpha diversity, pd whole tree
food_alpha <- read.delim("data/processed_food/dhydrt_alpha.txt", row = 1)
plot_food_alpha <- merge(food_alpha, map_sample, by = 0)
mean_food_alpha <- plot_food_alpha %>% group_by(UserName) %>% dplyr::summarise(median(PD_whole_tree))
test <- micro_order
test <- merge(test, counts, by = 1)
# The ratio of positive to total correlations is correlated with stability (p = 0.001, rho = 0.41)
mytest <- cor.test(test$ave_cloud, test$pos/(test$pos+test$neg), method = "spearman", exact = F)
corr_plot <- ggplot(data = test, aes(y = ave_cloud, x = (pos/(pos+neg)))) +
geom_smooth(method = "lm", color = "black") +
geom_point(color ="red", size = 3) +
geom_point(shape = 1, size =3, color = "black") +
ylab("Microbiome Stability") +
xlab("Positive/Total Correlations") +
annotate("text", x = 0.8, y = 0.06, label = paste("r =",signif(mytest$estimate, 1), ",", "pval =", signif(mytest$p.value, 1)), size = 3)
corr_plot
test1 <- mean_food_alpha
test1 <- merge(test1, counts, by = 1)
# The ratio of positive to total correlations is correlated with stability (p = 0.001, rho = 0.41)
#mytest <-
cor.test(test1$`median(PD_whole_tree)`, test1$pos/(test1$pos+test1$neg), method = "spearman", exact = F)
corr_plot <- ggplot(data = test1, aes(y = `median(PD_whole_tree)`, x = (pos/(pos+neg)))) +
geom_smooth(method = "lm", color = "black") +
geom_point(color ="red", size = 3) +
geom_point(shape = 1, size =3, color = "black") +
ylab("Microbiome Stability") +
xlab("Positive/Total Correlations") +
annotate("text", x = 0.8, y = 0.06, label = paste("r =",signif(mytest$estimate, 1), ",", "pval =", signif(mytest$p.value, 1)), size = 3)
corr_plot
mytest <- cor.test(test1$`median(PD_whole_tree)`, test1$pos/(test1$pos+test1$neg), method = "spearman", exact = F)
corr_plot <- ggplot(data = test1, aes(y = `median(PD_whole_tree)`, x = (pos/(pos+neg)))) +
geom_smooth(method = "lm", color = "black") +
geom_point(color ="red", size = 3) +
geom_point(shape = 1, size =3, color = "black") +
ylab("Microbiome Stability") +
xlab("Positive/Total Correlations") +
annotate("text", x = 0.8, y = 0.06, label = paste("r =",signif(mytest$estimate, 1), ",", "pval =", signif(mytest$p.value, 1)), size = 3)
corr_plot
corr_plot <- ggplot(data = test, aes(y = ave_cloud, x = (pos/(pos+neg)))) +
geom_smooth(method = "lm", color = "black") +
geom_point(color ="#E71D36", size = 3) +
geom_point(shape = 1, size =3, color = "black") +
ylab("Microbiome Stability") +
xlab("Positive/Total Correlations") +
annotate("text", x = 0.8, y = 0.06, label = paste("r =",signif(mytest$estimate, 1), ",", "pval =", signif(mytest$p.value, 1)), size = 3)
corr_plot
corr_plot <- ggplot(data = test, aes(y = ave_cloud, x = (pos/(pos+neg)))) +
geom_smooth(method = "lm", color = "black") +
geom_point(color ="#E71D36", size = 3) +
geom_point(shape = 1, size =3, color = "black") +
ylab("Microbiome Stability") +
xlab("Positive Correlation Proportion") +
annotate("text", x = 0.8, y = 0.06, label = paste("r =",signif(mytest$estimate, 1), ",", "pval =", signif(mytest$p.value, 1)), size = 3)
corr_plot
test <- micro_order
test <- merge(test, counts, by = 1)
# The ratio of positive to total correlations is correlated with stability (p = 0.001, rho = 0.41)
mytest <- cor.test(test$ave_cloud, test$pos/(test$pos+test$neg), method = "spearman", exact = F)
corr_plot <- ggplot(data = test, aes(y = ave_cloud, x = (pos/(pos+neg)))) +
geom_smooth(method = "lm", color = "black") +
geom_point(color ="#E71D36", size = 3) +
geom_point(shape = 1, size =3, color = "black") +
ylab("Microbiome Stability") +
xlab("Positive Correlation Proportion") +
annotate("text", x = 0.8, y = 0.06, label = paste("r =",signif(mytest$estimate, 1), ",", "pval =", signif(mytest$p.value, 1)), size = 3)
corr_plot
corr_plot <- ggplot(data = test1, aes(y = `median(PD_whole_tree)`, x = (pos/(pos+neg)))) +
geom_smooth(method = "lm", color = "black") +
geom_point(color ="red", size = 3) +
geom_point(shape = 1, size =3, color = "black") +
ylab("Dietary Diversity") +
xlab("Positive/Total Correlations") +
annotate("text", x = 0.8, y = 0.06, label = paste("r =",signif(mytest$estimate, 1), ",", "pval =", signif(mytest$p.value, 1)), size = 3)
corr_plot
test1 <- mean_food_alpha
test1 <- merge(test1, counts, by = 1)
# The ratio of positive to total correlations is correlated with stability (p = 0.001, rho = 0.41)
#mytest <-
mytest <- cor.test(test1$`median(PD_whole_tree)`, test1$pos/(test1$pos+test1$neg), method = "spearman", exact = F)
corr_plot <- ggplot(data = test1, aes(y = `median(PD_whole_tree)`, x = (pos/(pos+neg)))) +
geom_smooth(method = "lm", color = "black") +
geom_point(color ="red", size = 3) +
geom_point(shape = 1, size =3, color = "black") +
ylab("Dietary Diversity") +
xlab("Positive/Total Correlations") +
annotate("text", x = 0.8, y = 0.06, label = paste("r =",signif(mytest$estimate, 1), ",", "pval =", signif(mytest$p.value, 1)), size = 3)
corr_plot
mytest <- cor.test(test1$`median(PD_whole_tree)`, test1$pos/(test1$pos+test1$neg), method = "spearman", exact = F)
corr_plot <- ggplot(data = test1, aes(y = `median(PD_whole_tree)`, x = (pos/(pos+neg)))) +
geom_smooth(method = "lm", color = "black") +
geom_point(color ="red", size = 3) +
geom_point(shape = 1, size =3, color = "black") +
ylab("Dietary Diversity") +
xlab("Positive/Total Correlations") +
annotate("text", x = 0.8, y = 0.06, label = paste("r =",signif(mytest$estimate, 1), ",", "pval =", signif(mytest$p.value, 1)), size = 3)
corr_plot
# this chunck sets up the rmd document
require(rmarkdown)
require(knitr)
require(tidyverse)
require(RColorBrewer)
require(cowplot)
require(reshape2)
require(ggdendro)
require(vegan)
require(ape)
# set the path for root directory
opts_knit$set(root.dir = "/Users/abby/Documents/Projects/dietstudy/")
# create a directory for the figure and set it's resolution/format
opts_chunk$set(echo = TRUE, fig.path = "Figs/", dev = c("png", "pdf"), dpi = 300)
# set up colors
pal <- c("#ff0000", "#ffd940", "#008c4b", "#00138c", "#8c235b", "#ffbfbf", "#8c7723", "#468c75", "#8091ff", "#ff80c4", "#8c3123", "#fff2bf", "#40fff2", "#69698c", "#ff0044", "#ff9180", "#e5ff80", "#bffbff", "#5940ff", "#8c696e", "#8c7369", "#858c69", "#40d9ff", "#c480ff", "#ff8c40", "#4b8c00", "#23698c", "#69238c", "#8c4b00", "#bfffbf", "#004b8c", "#eabfff", "#ffc480", "#40ff59", "#80c4ff", "#ff40f2")
set.seed(42)
#### load the maps for downstream use ####
map_sample <- read.table("data/maps/SampleID_map.txt", sep = "\t", header = T, comment = "")
rownames(map_sample) <- map_sample$X.SampleID
map_username <- read.table("data/maps/UserName_map.txt", sep = "\t", header = T, comment = "")
map_sample$StudyDate <- as.Date.factor(map_sample$StudyDate, format = "%m/%d/%y")
#load other maps
food_map <- read.table("data/maps/food_map.txt", sep = "\t", header = T, comment = "")
tax_map <- read.table("data/maps/taxonomy_norm_map.txt", sep = "\t", header = T, comment = "")
# load the food distance matrix, unweighted unifrac
food_un <- read.delim("data/processed_food/dhydrt_beta/unweighted_unifrac_dhydrt.txt", row = 1) # weighted in not significant
food_dist <- as.dist(food_un)
# load food alpha diversity, pd whole tree
food_alpha <- read.delim("data/processed_food/dhydrt_alpha.txt", row = 1)
# load microbiome alpha diversity
tax_alpha <- read.delim("data/processed_tax/taxa_alpha.txt", sep = "\t", row.names = 1) #from the taxonomy counts values
# load taxonomy collapsed for each person
tax <- read.delim("data/processed_tax/taxonomy_clr_s.txt", row = 1)
# make taxonomy distance matrix
tax_dist <- dist(t(tax))
# convert to data frame to use below
tax_beta <- as.data.frame(as.matrix(tax_dist))
# calculate mean of the mean distance to self for each sample, for each UserName
# Food
mydist <- NULL
for (i in unique(food_map$UserName)) {
name <- food_map[food_map$UserName == i,1]
name <- as.vector(name)
tmp <- food_un[rownames(food_un) %in% name, colnames(food_un) %in% name]
num <- rowMeans(tmp, na.rm = T)
num <- cbind(i,num)
mydist <- rbind(num, mydist)
colnames(mydist) <- c("UserName", "food_mean_beta_div")
}
food_dist <- as.data.frame(mydist)
food_dist$food_mean_beta_div <- as.character(food_dist$food_mean_beta_div)
food_dist$food_mean_beta_div <- as.numeric(food_dist$food_mean_beta_div)
# Taxa
mydist <- NULL
for (i in unique(tax_map$UserName)) {
name <- tax_map[tax_map$UserName == i,1]
name <- as.vector(name)
tmp <- tax_beta[rownames(tax_beta) %in% name, colnames(tax_beta) %in% name]
num <- rowMeans(tmp, na.rm = T)
num <- cbind(i,num)
mydist <- rbind(num, mydist)
colnames(mydist) <- c("UserName", "mean_beta_div")
}
tax_dist <- as.data.frame(mydist)
tax_dist <- droplevels(tax_dist)
tax_dist$mean_beta_div <- as.character(tax_dist$mean_beta_div)
tax_dist$mean_beta_div <- as.numeric(tax_dist$mean_beta_div)
tax_dist$mean_beta_div <- 1/tax_dist$mean_beta_div
# Get average microbiome distance to self
# This will also be used to order the plot
micro_order <- tax_dist %>%
group_by(UserName) %>%
dplyr::summarise(ave_cloud = median(mean_beta_div, na.rm=T)) # ave_cloud is inverse variability = stability
# sort by mean
micro_order <- micro_order[order(micro_order$ave_cloud),]
# get factor names for ordering
ord_factor <- as.character(micro_order$UserName)
#
# # calculate median food distance to self
# food_order <- food_dist %>%
#   group_by(UserName) %>%
#   dplyr::summarize(food_cloud = median(food_mean_beta_div))
# add metadata
tax_dist_meta <- merge(tax_dist, map_sample, by = 0)
# Check microbiome
stability_test <- tax_dist_meta %>%
group_by(UserName.x, Supplement, Timing) %>%
summarise(ave = median(mean_beta_div, na.rm=T)) %>%
filter(Timing %in% c("Pre", "Post"))
plot_food_alpha <- food_alpha
plot_food_alpha <- merge(plot_food_alpha, map_sample, by = 0)
mean_food_alpha <- plot_food_alpha %>% group_by(UserName) %>% summarise(median(PD_whole_tree))
mean_food_test <- merge(micro_order, mean_food_alpha)
mean_food_test_no_soy <- mean_food_test %>% filter(!UserName %in% c("MCTs11", "MCTs12") )
mytest <- cor.test(mean_food_test_no_soy$`median(PD_whole_tree)`, mean_food_test_no_soy$ave_cloud, method = "spearman", exact = F)
corr_plot <- ggplot(data = mean_food_test_no_soy, aes(y = ave_cloud, x = `median(PD_whole_tree)`)) +
geom_smooth(method = "lm", color = "black") +
geom_point(color ="#FF7F50", size = 3) +
geom_point(shape = 1, size =3, color = "black") +
ylab("Microbiome Stability") +
xlab("Dietary Diversity") +
annotate("text", x = 90, y = 0.07, label = paste("r =",signif(mytest$estimate, 1), ",", "pval =", signif(mytest$p.value, 1)), size = 3)
corr_plot
# this chunck sets up the rmd document
require(rmarkdown)
require(knitr)
require(tidyverse)
require(RColorBrewer)
require(cowplot)
require(reshape2)
require(ggdendro)
require(vegan)
require(ape)
# set the path for root directory
opts_knit$set(root.dir = "/Users/abby/Documents/Projects/dietstudy/")
# create a directory for the figure and set it's resolution/format
opts_chunk$set(echo = TRUE, fig.path = "Figs/", dev = c("png", "pdf"), dpi = 300)
# set up colors
pal <- c("#ff0000", "#ffd940", "#008c4b", "#00138c", "#8c235b", "#ffbfbf", "#8c7723", "#468c75", "#8091ff", "#ff80c4", "#8c3123", "#fff2bf", "#40fff2", "#69698c", "#ff0044", "#ff9180", "#e5ff80", "#bffbff", "#5940ff", "#8c696e", "#8c7369", "#858c69", "#40d9ff", "#c480ff", "#ff8c40", "#4b8c00", "#23698c", "#69238c", "#8c4b00", "#bfffbf", "#004b8c", "#eabfff", "#ffc480", "#40ff59", "#80c4ff", "#ff40f2")
set.seed(42)
#### load the maps for downstream use ####
map_sample <- read.table("data/maps/SampleID_map.txt", sep = "\t", header = T, comment = "")
rownames(map_sample) <- map_sample$X.SampleID
map_username <- read.table("data/maps/UserName_map.txt", sep = "\t", header = T, comment = "")
map_sample$StudyDate <- as.Date.factor(map_sample$StudyDate, format = "%m/%d/%y")
#load other maps
food_map <- read.table("data/maps/food_map.txt", sep = "\t", header = T, comment = "")
tax_map <- read.table("data/maps/taxonomy_norm_map.txt", sep = "\t", header = T, comment = "")
# load the food distance matrix, unweighted unifrac
food_un <- read.delim("data/processed_food/dhydrt_beta/unweighted_unifrac_dhydrt.txt", row = 1) # weighted in not significant
food_dist <- as.dist(food_un)
# load food alpha diversity, pd whole tree
food_alpha <- read.delim("data/processed_food/dhydrt_alpha.txt", row = 1)
# load microbiome alpha diversity
tax_alpha <- read.delim("data/processed_tax/taxa_alpha.txt", sep = "\t", row.names = 1) #from the taxonomy counts values
# load taxonomy collapsed for each person
tax <- read.delim("data/processed_tax/taxonomy_clr_s.txt", row = 1)
# make taxonomy distance matrix
tax_dist <- dist(t(tax))
# convert to data frame to use below
tax_beta <- as.data.frame(as.matrix(tax_dist))
# calculate mean of the mean distance to self for each sample, for each UserName
# Food
mydist <- NULL
for (i in unique(food_map$UserName)) {
name <- food_map[food_map$UserName == i,1]
name <- as.vector(name)
tmp <- food_un[rownames(food_un) %in% name, colnames(food_un) %in% name]
num <- rowMeans(tmp, na.rm = T)
num <- cbind(i,num)
mydist <- rbind(num, mydist)
colnames(mydist) <- c("UserName", "food_mean_beta_div")
}
food_dist <- as.data.frame(mydist)
food_dist$food_mean_beta_div <- as.character(food_dist$food_mean_beta_div)
food_dist$food_mean_beta_div <- as.numeric(food_dist$food_mean_beta_div)
# Taxa
mydist <- NULL
for (i in unique(tax_map$UserName)) {
name <- tax_map[tax_map$UserName == i,1]
name <- as.vector(name)
tmp <- tax_beta[rownames(tax_beta) %in% name, colnames(tax_beta) %in% name]
num <- rowMeans(tmp, na.rm = T)
num <- cbind(i,num)
mydist <- rbind(num, mydist)
colnames(mydist) <- c("UserName", "mean_beta_div")
}
tax_dist <- as.data.frame(mydist)
tax_dist <- droplevels(tax_dist)
tax_dist$mean_beta_div <- as.character(tax_dist$mean_beta_div)
tax_dist$mean_beta_div <- as.numeric(tax_dist$mean_beta_div)
tax_dist$mean_beta_div <- 1/tax_dist$mean_beta_div
# Get average microbiome distance to self
# This will also be used to order the plot
micro_order <- tax_dist %>%
group_by(UserName) %>%
dplyr::summarise(ave_cloud = median(mean_beta_div, na.rm=T)) # ave_cloud is inverse variability = stability
# sort by mean
micro_order <- micro_order[order(micro_order$ave_cloud),]
# get factor names for ordering
ord_factor <- as.character(micro_order$UserName)
#
# # calculate median food distance to self
# food_order <- food_dist %>%
#   group_by(UserName) %>%
#   dplyr::summarize(food_cloud = median(food_mean_beta_div))
# add metadata
tax_dist_meta <- merge(tax_dist, map_sample, by = 0)
# Check microbiome
stability_test <- tax_dist_meta %>%
group_by(UserName.x, Supplement, Timing) %>%
summarise(ave = median(mean_beta_div, na.rm=T)) %>%
filter(Timing %in% c("Pre", "Post"))
plot_food_alpha <- food_alpha
plot_food_alpha <- merge(plot_food_alpha, map_sample, by = 0)
mean_food_alpha <- plot_food_alpha %>% group_by(UserName) %>% summarise(median(PD_whole_tree))
mean_food_test <- merge(micro_order, mean_food_alpha)
mean_food_test_no_soy <- mean_food_test %>% filter(!UserName %in% c("MCTs11", "MCTs12") )
mytest <- cor.test(mean_food_test_no_soy$`median(PD_whole_tree)`, mean_food_test_no_soy$ave_cloud, method = "spearman", exact = F)
corr_plot <- ggplot(data = mean_food_test_no_soy, aes(y = ave_cloud, x = `median(PD_whole_tree)`)) +
geom_smooth(method = "lm", color = "black") +
geom_point(color ="#FF7F50", size = 3) +
geom_point(shape = 1, size =3, color = "black") +
ylab("Microbiome Stability") +
xlab("Dietary Diversity") +
annotate("text", x = 90, y = 0.07, label = paste("r =",signif(mytest$estimate, 1), ",", "pval =", signif(mytest$p.value, 1)), size = 3)
corr_plot
# this chunck sets up the rmd document
require(rmarkdown)
require(knitr)
require(tidyverse)
require(RColorBrewer)
require(cowplot)
require(reshape2)
require(ggdendro)
require(vegan)
require(ape)
# set the path for root directory
opts_knit$set(root.dir = "/Users/abby/Documents/Projects/dietstudy/")
# create a directory for the figure and set it's resolution/format
opts_chunk$set(echo = TRUE, fig.path = "Figs/", dev = c("png", "pdf"), dpi = 300)
# set up colors
pal <- c("#ff0000", "#ffd940", "#008c4b", "#00138c", "#8c235b", "#ffbfbf", "#8c7723", "#468c75", "#8091ff", "#ff80c4", "#8c3123", "#fff2bf", "#40fff2", "#69698c", "#ff0044", "#ff9180", "#e5ff80", "#bffbff", "#5940ff", "#8c696e", "#8c7369", "#858c69", "#40d9ff", "#c480ff", "#ff8c40", "#4b8c00", "#23698c", "#69238c", "#8c4b00", "#bfffbf", "#004b8c", "#eabfff", "#ffc480", "#40ff59", "#80c4ff", "#ff40f2")
set.seed(42)
#### load the maps for downstream use ####
map_sample <- read.table("data/maps/SampleID_map.txt", sep = "\t", header = T, comment = "")
rownames(map_sample) <- map_sample$X.SampleID
map_username <- read.table("data/maps/UserName_map.txt", sep = "\t", header = T, comment = "")
map_sample$StudyDate <- as.Date.factor(map_sample$StudyDate, format = "%m/%d/%y")
#load other maps
food_map <- read.table("data/maps/food_map.txt", sep = "\t", header = T, comment = "")
tax_map <- read.table("data/maps/taxonomy_norm_map.txt", sep = "\t", header = T, comment = "")
# load the food distance matrix, unweighted unifrac
food_un <- read.delim("data/processed_food/dhydrt_beta/unweighted_unifrac_dhydrt.txt", row = 1) # weighted in not significant
food_dist <- as.dist(food_un)
# load food alpha diversity, pd whole tree
food_alpha <- read.delim("data/processed_food/dhydrt_alpha.txt", row = 1)
# load microbiome alpha diversity
tax_alpha <- read.delim("data/processed_tax/taxa_alpha.txt", sep = "\t", row.names = 1) #from the taxonomy counts values
# load taxonomy collapsed for each person
tax <- read.delim("data/processed_tax/taxonomy_clr_s.txt", row = 1)
# make taxonomy distance matrix
tax_dist <- dist(t(tax))
# convert to data frame to use below
tax_beta <- as.data.frame(as.matrix(tax_dist))
# calculate mean of the mean distance to self for each sample, for each UserName
# Food
mydist <- NULL
for (i in unique(food_map$UserName)) {
name <- food_map[food_map$UserName == i,1]
name <- as.vector(name)
tmp <- food_un[rownames(food_un) %in% name, colnames(food_un) %in% name]
num <- rowMeans(tmp, na.rm = T)
num <- cbind(i,num)
mydist <- rbind(num, mydist)
colnames(mydist) <- c("UserName", "food_mean_beta_div")
}
food_dist <- as.data.frame(mydist)
food_dist$food_mean_beta_div <- as.character(food_dist$food_mean_beta_div)
food_dist$food_mean_beta_div <- as.numeric(food_dist$food_mean_beta_div)
# Taxa
mydist <- NULL
for (i in unique(tax_map$UserName)) {
name <- tax_map[tax_map$UserName == i,1]
name <- as.vector(name)
tmp <- tax_beta[rownames(tax_beta) %in% name, colnames(tax_beta) %in% name]
num <- rowMeans(tmp, na.rm = T)
num <- cbind(i,num)
mydist <- rbind(num, mydist)
colnames(mydist) <- c("UserName", "mean_beta_div")
}
tax_dist <- as.data.frame(mydist)
tax_dist <- droplevels(tax_dist)
tax_dist$mean_beta_div <- as.character(tax_dist$mean_beta_div)
tax_dist$mean_beta_div <- as.numeric(tax_dist$mean_beta_div)
tax_dist$mean_beta_div <- 1/tax_dist$mean_beta_div
# Get average microbiome distance to self
# This will also be used to order the plot
micro_order <- tax_dist %>%
group_by(UserName) %>%
dplyr::summarise(ave_cloud = median(mean_beta_div, na.rm=T)) # ave_cloud is inverse variability = stability
# sort by mean
micro_order <- micro_order[order(micro_order$ave_cloud),]
# get factor names for ordering
ord_factor <- as.character(micro_order$UserName)
#
# # calculate median food distance to self
# food_order <- food_dist %>%
#   group_by(UserName) %>%
#   dplyr::summarize(food_cloud = median(food_mean_beta_div))
# this chunck sets up the rmd document
require(rmarkdown)
require(knitr)
require(tidyverse)
require(RColorBrewer)
require(cowplot)
require(reshape2)
require(ggdendro)
require(vegan)
require(ape)
# set the path for root directory
opts_knit$set(root.dir = "/Users/abby/Documents/Projects/dietstudy/")
# create a directory for the figure and set it's resolution/format
opts_chunk$set(echo = TRUE, fig.path = "Figs/", dev = c("png", "pdf"), dpi = 300)
# set up colors
pal <- c("#ff0000", "#ffd940", "#008c4b", "#00138c", "#8c235b", "#ffbfbf", "#8c7723", "#468c75", "#8091ff", "#ff80c4", "#8c3123", "#fff2bf", "#40fff2", "#69698c", "#ff0044", "#ff9180", "#e5ff80", "#bffbff", "#5940ff", "#8c696e", "#8c7369", "#858c69", "#40d9ff", "#c480ff", "#ff8c40", "#4b8c00", "#23698c", "#69238c", "#8c4b00", "#bfffbf", "#004b8c", "#eabfff", "#ffc480", "#40ff59", "#80c4ff", "#ff40f2")
set.seed(42)
#### load the maps for downstream use ####
map_sample <- read.table("data/maps/SampleID_map.txt", sep = "\t", header = T, comment = "")
rownames(map_sample) <- map_sample$X.SampleID
map_username <- read.table("data/maps/UserName_map.txt", sep = "\t", header = T, comment = "")
map_sample$StudyDate <- as.Date.factor(map_sample$StudyDate, format = "%m/%d/%y")
#load other maps
food_map <- read.table("data/maps/food_map.txt", sep = "\t", header = T, comment = "")
tax_map <- read.table("data/maps/taxonomy_norm_map.txt", sep = "\t", header = T, comment = "")
# load the food distance matrix, unweighted unifrac
food_un <- read.delim("data/processed_food/dhydrt_beta/unweighted_unifrac_dhydrt.txt", row = 1) # weighted in not significant
food_dist <- as.dist(food_un)
# load food alpha diversity, pd whole tree
food_alpha <- read.delim("data/processed_food/dhydrt_alpha.txt", row = 1)
# load microbiome alpha diversity
tax_alpha <- read.delim("data/processed_tax/taxa_alpha.txt", sep = "\t", row.names = 1) #from the taxonomy counts values
# load taxonomy collapsed for each person
tax <- read.delim("data/processed_tax/taxonomy_clr_s.txt", row = 1)
# make taxonomy distance matrix
tax_dist <- dist(t(tax))
# convert to data frame to use below
tax_beta <- as.data.frame(as.matrix(tax_dist))
# calculate mean of the mean distance to self for each sample, for each UserName
# Food
mydist <- NULL
for (i in unique(food_map$UserName)) {
name <- food_map[food_map$UserName == i,1]
name <- as.vector(name)
tmp <- food_un[rownames(food_un) %in% name, colnames(food_un) %in% name]
num <- rowMeans(tmp, na.rm = T)
num <- cbind(i,num)
mydist <- rbind(num, mydist)
colnames(mydist) <- c("UserName", "food_mean_beta_div")
}
food_dist <- as.data.frame(mydist)
food_dist$food_mean_beta_div <- as.character(food_dist$food_mean_beta_div)
food_dist$food_mean_beta_div <- as.numeric(food_dist$food_mean_beta_div)
# Taxa
mydist <- NULL
for (i in unique(tax_map$UserName)) {
name <- tax_map[tax_map$UserName == i,1]
name <- as.vector(name)
tmp <- tax_beta[rownames(tax_beta) %in% name, colnames(tax_beta) %in% name]
num <- rowMeans(tmp, na.rm = T)
num <- cbind(i,num)
mydist <- rbind(num, mydist)
colnames(mydist) <- c("UserName", "mean_beta_div")
}
tax_dist <- as.data.frame(mydist)
tax_dist <- droplevels(tax_dist)
tax_dist$mean_beta_div <- as.character(tax_dist$mean_beta_div)
tax_dist$mean_beta_div <- as.numeric(tax_dist$mean_beta_div)
tax_dist$mean_beta_div <- 1/tax_dist$mean_beta_div
# Get average microbiome distance to self
# This will also be used to order the plot
micro_order <- tax_dist %>%
group_by(UserName) %>%
dplyr::summarise(ave_cloud = median(mean_beta_div, na.rm=T)) # ave_cloud is inverse variability = stability
# sort by mean
micro_order <- micro_order[order(micro_order$ave_cloud),]
# get factor names for ordering
ord_factor <- as.character(micro_order$UserName)
#
# # calculate median food distance to self
# food_order <- food_dist %>%
#   group_by(UserName) %>%
#   dplyr::summarize(food_cloud = median(food_mean_beta_div))
# add metadata
tax_dist_meta <- merge(tax_dist, map_sample, by = 0)
View(tax_dist_meta)
# Check microbiome
stability_test <- tax_dist_meta %>%
group_by(UserName.x, Supplement, Timing) %>%
summarise(ave = median(mean_beta_div, na.rm=T)) %>%
filter(Timing %in% c("Pre", "Post"))
tax_dist_meta$Timing
tax_dist_meta %>%
group_by(UserName.x, Supplement, Timing)
# Check microbiome
stability_test <- tax_dist_meta %>%
group_by(UserName.x, Supplement, Timing) %>%
summarise(ave = median(mean_beta_div, na.rm=T)) %>%
filter(Timing %in% c("Pre", "Post"))
# Check microbiome
stability_test <- tax_dist_meta %>%
group_by(UserName.x, Supplement, Timing) %>%
summarize(ave = median(mean_beta_div, na.rm=T)) %>%
filter(Timing %in% c("Pre", "Post"))
# Check microbiome
stability_test <- tax_dist_meta %>%
dlpyr::group_by(UserName.x, Supplement, Timing) %>%
summarise(ave = median(mean_beta_div, na.rm=T)) %>%
filter(Timing %in% c("Pre", "Post"))
