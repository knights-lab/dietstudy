mean(sapply(1:nrow(taxa7hat.mc), function(ixx) cor(taxa7hat.mc[ixx,], taxa7[ixx,],method='spear')))
})
}))
plot(1:31, cors.mb,type='l',lwd=2)
for(i in 1:ncol(mc.cors.mb)) lines(1:31, mc.cors.mb[,i],col='#0000bb11',type='l'); lines(1:31,rowMeans(mc.cors.mb),col='blue',type='l',lwd=2); legend('bottomright',legend=c('Model','Random'),pch=c(NA,NA),col=c('black','blue'),lty=c(1,1),lwd=c(2,2))
ggplot(x=c(1:31), y = cors.mb) + geom_line()
```{r Dan code, echo = F, fig.height = 4, fig.width = 4}
# from Dan's email 4/18/2017
# Using food unifrac distances to predict species or genus taxa (especially when dropping taxa with average relative abundance < 0.001) does seem to be highly significant
# Not a huge biological effect -- adds 5% or so of spearman correlation
# need to create a beta-diversity table at the subject level
# load subject level beta-diversity for food
foodbeta <- read.table('/Users/abby/Documents/Projects/MCTs/Analysis/Procrustes/data/beta_food_smry/unweighted_unifrac_food_smry.txt', sep='\t', row=1,head=T,check=F,comment='')
taxa7 <- read.table("/Users/abby/Documents/Projects/MCTs/Analysis/Procrustes/data/tax_smry.txt", sep = "\t", head= T,row = 1, comment = "");
taxa7 <- t(taxa7)
foodbeta <- foodbeta[rownames(foodbeta) %in% rownames(taxa7),colnames(foodbeta) %in% rownames(taxa7)]
taxa7 <- taxa7[rownames(taxa7) %in% rownames(foodbeta),]
# iterate through k = 1:31 (number of neighbors)
# for each k, predict taxa and get correlation
cors.mb <- sapply(1:31, function(k) {
taxa7hat <- taxa7
for(i in 1:nrow(taxa7hat)) taxa7hat[i,] <- colMeans(taxa7[order(foodbeta[i,])[-1][1:k],,drop=F]);
mean(sapply(1:nrow(taxa7hat), function(ixx) cor(taxa7hat[ixx,], taxa7[ixx,],method='spear')))
})
# as above but with random sets of neighbors
mc.cors.mb <- t(sapply(1:31,function(k) {
replicate(20,{
taxa7hat.mc <- taxa7;
for(i in 1:nrow(taxa7hat.mc)) taxa7hat.mc[i,] <- colMeans(taxa7[sample((1:nrow(taxa7hat.mc))[-i])[1:k],,drop=F]);
mean(sapply(1:nrow(taxa7hat.mc), function(ixx) cor(taxa7hat.mc[ixx,], taxa7[ixx,],method='spear')))
})
}))
plot(1:31, cors.mb,type='l',lwd=2)
for(i in 1:ncol(mc.cors.mb)) lines(1:31, mc.cors.mb[,i],col='#0000bb11',type='l'); lines(1:31,rowMeans(mc.cors.mb),col='blue',type='l',lwd=2); legend('bottomright',legend=c('Model','Random'),pch=c(NA,NA),col=c('black','blue'),lty=c(1,1),lwd=c(2,2))
ggplot(data = cors.mb, aes(x = 1:31, y = cors.mb)) + geom_line()
ggplot(data = cors.mb, aes( y = cors.mb)) + geom_line()
as.data.frame(cors.mb)
plot <- as.data.frame(cors.mb)
View(plot)
ggplot(data = cors.mb, aes( y = cors.mb)) + geom_line()
plot <- rownames_to_column(plot, var = "k")
ggplot(data = cors.mb, aes(x=k, y = cors.mb)) + geom_line()
plot <- as.data.frame(cors.mb)
plot <- rownames_to_column(plot, var = "k")
plot(1:31, cors.mb,type='l',lwd=2)
for(i in 1:ncol(mc.cors.mb)) lines(1:31, mc.cors.mb[,i],col='#0000bb11',type='l'); lines(1:31,rowMeans(mc.cors.mb),col='blue',type='l',lwd=2); legend('bottomright',legend=c('Model','Random'),pch=c(NA,NA),col=c('black','blue'),lty=c(1,1),lwd=c(2,2))
cors.mb <- sapply(1:31, function(k) {
taxa7hat <- taxa7
for(i in 1:nrow(taxa7hat)) taxa7hat[i,] <- colMeans(taxa7[order(foodbeta[i,])[-1][1:k],,drop=F]);
mean(sapply(1:nrow(taxa7hat), function(ixx) cor(taxa7hat[ixx,], taxa7[ixx,],method='spear')))
})
plot <- as.data.frame(cors.mb)
plot <- rownames_to_column(plot, var = "k")
View(plot)
ggplot(plot, aes(x=k, y = cors.mb)) + geom_line()
ggplot(plot, aes(x=k, y = cors.mb)) + geom_point
ggplot(plot, aes(x=k, y = cors.mb)) + geom_point()
ggplot(plot, aes(x=k, y = cors.mb)) + geom_point() + geom_line()
View(mc.cors.mb)
plot <-
ggplot(plot, aes(x=k, y = cors.mb)) + geom_point() + geom_smooth()
ggplot(plot, aes(x=k, y = cors.mb)) + geom_point() + geom_smooth()
plot <- as.data.frame(cors.mb)
plot <- rownames_to_column(plot, var = "k")
ggplot(plot, aes(x=k, y = cors.mb)) + geom_point() + geom_smooth()
plot <- merge(plot, mc.cors.mb)
View(plot)
plot <- as.data.frame(merge(cors.mb,mc.cors.mb)
plot <- rownames_to_column(plot, var = "k")
plot <- as.data.frame(merge(cors.mb,mc.cors.mb))
plot <- as.data.frame(cbind(cors.mb,mc.cors.mb))
View(plot)
plot <- rownames_to_column(plot, var = "k")
plot <- melt(plot)
require(reshape2)
plot <- melt(plot)
View(plot)
ggplot(plot, aes(x=k, y = value, group= variable)) + geom_line()
ggplot(plot, aes(x=k, y = value, group= variable)) + geom_smooth()
ggplot(plot, aes(x=k, y = value, group= variable)) + geom_smooth(method = "lm")
ggplot(plot, aes(x=k, y = value, group= variable)) + geom_line(method = "")
?geom_line()
ggplot(plot, aes(x=k, y = value, group= variable)) + geom_step()
ggplot(plot, aes(x=k, y = value, group= variable)) + geom_line()
plot <- as.data.frame(cbind(cors.mb,mc.cors.mb))
plot <- rownames_to_column(plot, var = "k")
View(plot)
View(plot)
plot$mean_mc.cors.mb <- rowMeans(plot[3:ncol(plot)])
View(plot)
plot <- melt(plot)
ggplot(plot, aes(x=k, y = value, group= variable)) + geom_line()
ggplot(plot, aes(x=k, y = value, group=variable)) + geom_line(color=c("Blue", "Grey"))
plot <- as.data.frame(cbind(cors.mb,mc.cors.mb))
plot <- rownames_to_column(plot, var = "k")
plot$mean_mc.cors.mb <- rowMeans(plot[3:ncol(plot)])
View(plot)
plot1 <- plot[,c("k", "cors.mb", "mean_mc.cors.mb")]
ggplot(plot1, aes(x=k, y = value, group=variable)) + geom_line()
View(plot1)
plot1 <- melt(plot1)
ggplot(plot1, aes(x=k, y = value, group=variable)) + geom_line()
ggplot(plot1, aes(x=as.numeric(k), y = value, group=variable)) + geom_line()
plot2 <- plot[,c(1,3:ncol(plot)-1)]
View(plot2)
plot2 <- plot[,-c("cors.mb", "mean_mc.cors.mb")
ggplot(plot1, aes(x=as.numeric(k), y = value, group=variable)) + geom_line()
plot2 <- plot[,-c("cors.mb", "mean_mc.cors.mb")]
plot2 <- plot[,!c("cors.mb", "mean_mc.cors.mb")]
plot2 <- plot[,!colnames(plot) %in% c("cors.mb", "mean_mc.cors.mb")]
View(plot2)
plot2 <- melt(plot2)
iterations <- ggplot(plot2, aes(x = as.numeric(k), y = value, group = variable)) + geom_line()
main <- ggplot(plot1, aes(x=as.numeric(k), y = value, group=variable)) + geom_line()
main + iterations
main <- ggplot(plot1, aes(x=as.numeric(k), y = value, group=variable)) + geom_line() + iterations
iterations
<- geom_line(plot2, aes(x = as.numeric(k), y = value, group = variable))
main <- ggplot(plot1, aes(x=as.numeric(k), y = value, group=variable)) +
geom_line() +
geom_line(plot2, aes(x = as.numeric(k), y = value, group = variable))
plot <- as.data.frame(cbind(cors.mb,mc.cors.mb))
plot <- rownames_to_column(plot, var = "k")
plot$mean_mc.cors.mb <- rowMeans(plot[3:ncol(plot)])
plot1 <- plot[,c("k", "cors.mb", "mean_mc.cors.mb")]
plot1 <- melt(plot1)
plot2 <- plot[,!colnames(plot) %in% c("cors.mb", "mean_mc.cors.mb")]
plot2 <- melt(plot2)
main <- ggplot(plot1, aes(x=as.numeric(k), y = value, group=variable)) +
geom_line() +
geom_line(plot2, aes(x = as.numeric(k), y = value, group = variable))
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable)) +
geom_line() +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable))
main
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable)) +
geom_line() +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable + color = "grey"))
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable)) +
geom_line() +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey"))
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable)) +
geom_line() +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey")
main
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line()
main
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line() +
labs(x = "Iterations", y="Correlation")
main
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line(color = "Blue", color = "Black") +
labs(x = "Iterations", y="Correlation")
main
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line(color = c("Blue", "Black")) +
labs(x = "Iterations", y="Correlation")
main
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line(aes(group = variable), color = c("Blue", "Black")) +
labs(x = "Iterations", y="Correlation")
main
View(plot1)
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line(data = plot1, aes(group = variable), color = c("Blue", "Black")) +
labs(x = "Iterations", y="Correlation")
main
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line(data = plot1, aes(color = variable), color = c("Blue", "Black")) +
labs(x = "Iterations", y="Correlation")
main
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line(data = plot1, aes(fill = variable), color = c("Blue", "Black")) +
labs(x = "Iterations", y="Correlation")
main
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line(data = plot1, aes(fill = variable), fill = c("Blue", "Black")) +
labs(x = "Iterations", y="Correlation")
main
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line(data = plot1, aes(group = variable)) +
scale_color_manual(values = c("Black", "Blue"))
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line(data = plot1, aes(group = variable)) +
scale_color_manual(values = c("Black", "Blue")) +
labs(x = "Iterations", y="Correlation")
main
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line() +
scale_color_manual(values = c("Black", "Blue")) +
labs(x = "Iterations", y="Correlation")
main
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=as.factor(variable))) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line(color = variable) +
scale_color_manual(values = c("Black", "Blue")) +
labs(x = "Iterations", y="Correlation")
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line(color = variable) +
scale_color_manual(values = c("Black", "Blue")) +
labs(x = "Iterations", y="Correlation")
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line() +
scale_color_manual(values = c("Black", "Blue")) +
labs(x = "Iterations", y="Correlation")
main
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line() +
scale_color_manual(values = c("Black", "Blue")) +
labs(x = "Iterations", y="Correlation")
main
main <- ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line() +
scale_color_manual(values = c("Black", "Blue")) +
labs(x = "Iterations", y="Correlation") +
theme(legend.position = "bottom")
main
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line() +
scale_color_manual(values = c("Black", "Blue")) +
labs(x = "Iterations", y="Correlation") +
theme(legend.position = "bottom")
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line() +
scale_color_manual(values = c("Black", "Blue")) +
labs(x = "Iterations", y="Correlation") +
theme(legend.position = "bottom", legend.title = "none")
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line() +
scale_color_manual(values = c("Black", "Blue")) +
labs(x = "Iterations", y="Correlation") +
theme(legend.position = "bottom", legend.title = element_blank())
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line() +
scale_color_manual(values = c("Black", "Blue")) +
labs(x = "Iterations", y="Correlation") +
theme(legend.position = "bottom", legend.title = element_blank(), legend.text = element_text(c("Model", "Random")))
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line() +
scale_color_manual(values = c("Black", "Blue")) +
labs(x = "Iterations", y="Correlation") +
theme(legend.position = "bottom", legend.title = element_blank(), legend.text = element_text("Model", "Random"))
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line() +
scale_color_manual(values = c("Black", "Blue")) +
labs(x = "Iterations", y="Correlation") +
theme(legend.position = "bottom", legend.title = element_blank(), legend.text = element_text())
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line() +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Iterations", y="Correlation") +
theme(legend.position = "right",
legend.title = element_blank())
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line(size =3) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Iterations", y="Correlation") +
theme(legend.position = "right",
legend.title = element_blank())
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey") +
geom_line(size =.9) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Iterations", y="Correlation") +
theme(legend.position = "right",
legend.title = element_blank())
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .3) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Iterations", y="Correlation") +
theme(legend.position = "right",
legend.title = element_blank())
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .2) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Iterations", y="Correlation") +
theme(legend.position = "right",
legend.title = element_blank())
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .1) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Iterations", y="Correlation") +
theme(legend.position = "right",
legend.title = element_blank())
# from Dan's email 4/18/2017
# Using food unifrac distances to predict species or genus taxa (especially when dropping taxa with average relative abundance < 0.001) does seem to be highly significant
# Not a huge biological effect -- adds 5% or so of spearman correlation
# need to create a beta-diversity table at the subject level
# load subject level beta-diversity for food
foodbeta <- read.table('/Users/abby/Documents/Projects/MCTs/Analysis/Procrustes/data/beta_food_smry/unweighted_unifrac_food_smry.txt', sep='\t', row=1,head=T,check=F,comment='')
taxa7 <- read.table("/Users/abby/Documents/Projects/MCTs/Analysis/Procrustes/data/tax_smry.txt", sep = "\t", head= T,row = 1, comment = "");
taxa7 <- t(taxa7)
foodbeta <- foodbeta[rownames(foodbeta) %in% rownames(taxa7),colnames(foodbeta) %in% rownames(taxa7)]
taxa7 <- taxa7[rownames(taxa7) %in% rownames(foodbeta),]
# iterate through k = 1:31 (number of neighbors)
# for each k, predict taxa and get correlation
cors.mb <- sapply(1:31, function(k) {
taxa7hat <- taxa7
for(i in 1:nrow(taxa7hat)) taxa7hat[i,] <- colMeans(taxa7[order(foodbeta[i,])[-1][1:k],,drop=F]);
mean(sapply(1:nrow(taxa7hat), function(ixx) cor(taxa7hat[ixx,], taxa7[ixx,],method='spear')))
})
# as above but with random sets of neighbors
mc.cors.mb <- t(sapply(1:31,function(k) {
replicate(20,{
taxa7hat.mc <- taxa7;
for(i in 1:nrow(taxa7hat.mc)) taxa7hat.mc[i,] <- colMeans(taxa7[sample((1:nrow(taxa7hat.mc))[-i])[1:k],,drop=F]);
mean(sapply(1:nrow(taxa7hat.mc), function(ixx) cor(taxa7hat.mc[ixx,], taxa7[ixx,],method='spear')))
})
}))
#
# plot(1:31, cors.mb,type='l',lwd=2)
# for(i in 1:ncol(mc.cors.mb)) lines(1:31, mc.cors.mb[,i],col='#0000bb11',type='l'); lines(1:31,rowMeans(mc.cors.mb),col='blue',type='l',lwd=2); legend('bottomright',legend=c('Model','Random'),pch=c(NA,NA),col=c('black','blue'),lty=c(1,1),lwd=c(2,2))
#
#remake Dan's plot in ggpolt with 10x the lines, but at least i know how to change it :P
plot <- as.data.frame(cbind(cors.mb,mc.cors.mb))
plot <- rownames_to_column(plot, var = "k")
plot$mean_mc.cors.mb <- rowMeans(plot[3:ncol(plot)])
plot1 <- plot[,c("k", "cors.mb", "mean_mc.cors.mb")]
plot1 <- melt(plot1)
plot2 <- plot[,!colnames(plot) %in% c("cors.mb", "mean_mc.cors.mb")]
plot2 <- melt(plot2)
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .1) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Iterations", y="Correlation") +
theme(legend.position = "right",
legend.title = element_blank())
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .1) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Number of Neighbors", y="Correlation") +
theme(legend.position = "right",
legend.title = element_blank())
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .1) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Number of neighbors", y="Correlation") +
theme(legend.position = "right",
legend.title = element_blank())
require(tibble)
require(ggplot2)
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .2) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Number of neighbors", y="Correlation") +
theme(legend.position = "right",
legend.title = element_blank()) +
theme_classic()
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .2) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Number of neighbors", y="Correlation") +
theme(legend.position = "right",
legend.title = element_text("")) +
theme_classic()
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .2) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Number of neighbors", y="Correlation") +
theme(legend.position = "right",
legend.title = element_blank(),
legend.direction = "vertical") +
theme_classic()
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .2) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Number of neighbors", y="Correlation") +
theme(legend.position = "bottom",
legend.title = element_blank(),
legend.direction = "vertical") +
theme_classic()
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .2) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Number of neighbors", y="Correlation") +
theme_classic() +
theme(legend.position = "bottom",
legend.title = element_blank(),
legend.direction = "vertical") +
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .2) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Number of neighbors", y="Correlation") +
theme_classic() +
theme(legend.position = "bottom",
legend.title = element_blank(),
legend.direction = "vertical"))
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .2) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Number of neighbors", y="Correlation") +
theme_classic() +
theme(legend.position = "bottom",
legend.title = element_blank(),
legend.direction = "vertical")
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .2) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Number of neighbors", y="Correlation") +
theme_classic() +
theme(legend.position = "bottom",
legend.title = element_blank(),
legend.direction = "horrizontal")
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .2) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Number of neighbors", y="Correlation") +
theme_classic() +
theme(legend.position = "bottom",
legend.title = element_blank(),
legend.direction = "horizontal")
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .2) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Number of neighbors", y="Correlation") +
theme_classic() +
theme(legend.position = c(20,0.4),
legend.title = element_blank(),
legend.direction = "horizontal")
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .2) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Number of neighbors", y="Correlation") +
theme_classic() +
theme(legend.position = c(0.8,0.8),
legend.title = element_blank(),
legend.direction = "horizontal")
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .2) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Number of neighbors", y="Correlation") +
theme_classic() +
theme(legend.position = c(0.3,0.8),
legend.title = element_blank(),
legend.direction = "horizontal")
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .2) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Number of neighbors", y="Correlation") +
theme_classic() +
theme(legend.position = c(0.8,0.3),
legend.title = element_blank(),
legend.direction = "horizontal")
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .2) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Number of neighbors", y="Correlation") +
theme_classic() +
theme(legend.position = c(0.8,0),
legend.title = element_blank(),
legend.direction = "horizontal")
ggplot(data = plot1, aes(x=as.numeric(k), y = value, group=variable, color = variable)) +
geom_line(data = plot2, aes(x = as.numeric(k), y = value, group = variable), color = "grey", size = .2) +
geom_line(size =.8) +
scale_color_manual(values = c("Black", "Blue"), labels = c("Model", "Random")) +
labs(x = "Number of neighbors", y="Correlation") +
theme_classic() +
theme(legend.position = c(0.8,0.1),
legend.title = element_blank(),
legend.direction = "horizontal")
plot <- as.data.frame(cbind(cors.mb,mc.cors.mb))
plot <- rownames_to_column(plot, var = "k")
plot$mean_mc.cors.mb <- rowMeans(plot[3:ncol(plot)])
plot1 <- plot[,c("k", "cors.mb", "mean_mc.cors.mb")]
plot1 <- melt(plot1, id = "k")
plot2 <- plot[,!colnames(plot) %in% c("cors.mb", "mean_mc.cors.mb")]
