xlab("") +
ggtitle("Dietary Intake Soylent Subjects")
single_food_plot_6
single_food_plot_6<-ggplot(data = plot6, aes(x=StudyDayNo, y = value, fill=Food)) +
geom_area(stat = "identity") +
facet_grid(.~UserName, scales = "free") +
scale_fill_manual(values = colors_food, labels = gsub("_", " ", plot6$Food)) +
scale_x_discrete(drop = FALSE) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 12),
plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(size = 12),
legend.position = "right",
legend.text = element_text(size = 10),
legend.title = element_blank(),
panel.spacing.x=unit(0.05, "lines")) +
guides(fill = guide_legend(reverse = FALSE,
keywidth = 0.5,
keyheight = 0.5,
ncol = 1)) +
#nrow = 5)) + # for full page figure
#nrow = 1)) + # for slide figure
ylab("Relative Abundance") +
xlab("") +
ggtitle("Dietary Intake Soylent Subjects")
single_food_plot_6
#### single food but level 6 ####
# import diet data
food <- read.table("data/processed_food/dhydrt.txt", header = T, sep = "\t", comment = "", row.names = "taxonomy")
food <- food[, !(colnames(food) == "X.FoodID")]
mcts <- map[map$UserName %in% c("MCTs11", "MCTs12"),]
food <- food[, colnames(food) %in% mcts$X.SampleID]
# relative abundance
food <- sweep(food, 2, colSums(food), '/')
# drop to top 30 ish foods
food <- food[rowMeans(food) > 0.00001,]
# fix names
rownames(food) <- gsub(".*;", "", rownames(food))
# sort by highest average relative abundance
food <- food[order(rowMeans(food), decreasing = F),]
plot6 <- as.data.frame(t(food))
plot6 <- rownames_to_column(plot6, var = "X.SampleID")
plot6 <- melt(plot6, id = "X.SampleID", variable.name = "Food")
# merge with map to get day variable
plot6 <- merge(plot6, map, by = "X.SampleID")
# set seed to get nice colors
set.seed(3)
# get right number of colors for plotting
colors_food <- c("#775e42",
"#961ACB",
"#c91acb",
"#fe9700",
"#ff93ff",
"#a100aa",
"#dcabda")
single_food_plot_6<-ggplot(data = plot6, aes(x=StudyDayNo, y = value, fill=Food)) +
geom_area(stat = "identity") +
facet_grid(.~UserName, scales = "free") +
scale_fill_manual(values = colors_food, labels = gsub("_", " ", plot6$Food)) +
scale_x_discrete(drop = FALSE) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 12),
plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(size = 12),
legend.position = "right",
legend.text = element_text(size = 10),
legend.title = element_blank(),
panel.spacing.x=unit(0.05, "lines")) +
guides(fill = guide_legend(reverse = FALSE,
keywidth = 0.5,
keyheight = 0.5,
ncol = 1)) +
#nrow = 5)) + # for full page figure
#nrow = 1)) + # for slide figure
ylab("Relative Abundance") +
xlab("") +
ggtitle("Dietary Intake Soylent Subjects")
single_food_plot_6
#### single food but level 6 ####
# import diet data
food <- read.table("data/processed_food/dhydrt.txt", header = T, sep = "\t", comment = "", row.names = "taxonomy")
food <- food[, !(colnames(food) == "X.FoodID")]
mcts <- map[map$UserName %in% c("MCTs11", "MCTs12"),]
food <- food[, colnames(food) %in% mcts$X.SampleID]
# relative abundance
food <- sweep(food, 2, colSums(food), '/')
# drop to top 30 ish foods
food <- food[rowMeans(food) > 0.00001,]
# fix names
rownames(food) <- gsub(".*;", "", rownames(food))
# sort by highest average relative abundance
food <- food[order(rowMeans(food), decreasing = F),]
plot6 <- as.data.frame(t(food))
plot6 <- rownames_to_column(plot6, var = "X.SampleID")
plot6 <- melt(plot6, id = "X.SampleID", variable.name = "Food")
# merge with map to get day variable
plot6 <- merge(plot6, map, by = "X.SampleID")
# set seed to get nice colors
set.seed(3)
# get right number of colors for plotting
colors_food <- c("#775e42",
"#fe9700",
"#961ACB",
"#c91acb",
"#ff93ff",
"#a100aa",
"#dcabda")
single_food_plot_6<-ggplot(data = plot6, aes(x=StudyDayNo, y = value, fill=Food)) +
geom_area(stat = "identity") +
facet_grid(.~UserName, scales = "free") +
scale_fill_manual(values = colors_food) +
scale_x_discrete(drop = FALSE) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 12),
plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(size = 12),
legend.position = "right",
legend.text = element_text(size = 10),
legend.title = element_blank(),
panel.spacing.x=unit(0.05, "lines")) +
guides(fill = guide_legend(reverse = FALSE,
keywidth = 0.5,
keyheight = 0.5,
ncol = 1)) +
#nrow = 5)) + # for full page figure
#nrow = 1)) + # for slide figure
ylab("Relative Abundance") +
xlab("") +
ggtitle("Dietary Intake Soylent Subjects")
single_food_plot_6
mygrobs <- c(single_nutr[c(22,23])
# this chunck sets up the rmd document
require(rmarkdown)
require(knitr)
require(tidyverse)
require(RColorBrewer)
require(cowplot)
require(reshape2)
require(ggdendro)
require(vegan)
require(gridExtra)
# set the path for root directory
opts_knit$set(root.dir = "/Users/abby/Documents/Projects/dietstudy/")
# create a directory for the figure and set it's resolution/format
# opts_chunk$set(echo = TRUE, fig.path = "Figs_18_5_11/", dev = c("tiff"), dpi = 300, dev.args = list(compression="lzw"))
opts_chunk$set(echo = TRUE, fig.path = "Figs/", dev = c("pdf","png"), dpi = 300)
#### load the maps for downstream use ####
# full sample map - every possible sample
map <- read.table("data/maps/SampleID_map.txt", sep = "\t", header = T, comment = "")
# map for each subject
map_username <- read.table("data/maps/UserName_map.txt", sep = "\t", header = T, comment = "")
# map of just the smaples with taxonomy information after cleaning
tax_map <- read.table("data/maps/taxonomy_norm_map.txt", sep = "\t", header = T, comment = "")
# set up colors (http://phrogz.net/css/distinct-colors.html)
pal <- rev(c("#ff40f2", "#ff0000", "#008c4b", "#00138c", "#8c235b", "#ffbfbf", "#8c7723", "#468c75", "#8091ff", "#ff80c4", "#8c3123", "#fff2bf", "#40fff2", "#69698c", "#ff0044", "#ff9180", "#e5ff80", "#bffbff", "#5940ff", "#8c696e", "#8c7369", "#858c69", "#40d9ff", "#c480ff", "#ff8c40", "#4b8c00", "#23698c", "#69238c", "#8c4b00", "#bfffbf", "#004b8c", "#eabfff", "#ffc480", "#40ff59", "#80c4ff", "#ffd940" ))
pal1 <- rev(c("#ff0015", "#0073ff", "#adffcb", "#8c0000", "#ffadb4", "#add2ff", "#5f8c70", "#8c5f5f", "#bb00ff", "#5f748c", "#d0ff00", "#67008c", "#00ff5e", "#738c00", "#e9adff", "#008c33", "#f0ffad"))
pal2 <- rev(c("#8c5f63", "#ff0015", "#e9adff", "#003f8c", "#0073ff", "#adffcb", "#738c00", "#d0ff00", "#8c000c", "#67008c", "#bb00ff", "#add2ff", "#008c33", "#00ff5e", "#f0ffad", "#ffadad"))
pal3 <- rev(c("#ff4066", "#8091ff", "#c3ffbf", "#7a5c62", "#bfc8ff", "#7a771f", "#df40ff", "#40ffec", "#fffb80", "#703d7a", "#3d7a74", "#ff0000", "#f4bfff", "#bffff9", "#7a1f1f", "#00107a", "#11ff00", "#ffbfbf", "#4059ff", "#417a3d"))
pal4 <- c("#bf0000", "#f29d3d", "#a3d9b1", "#bfd9ff", "#f780ff", "#ff0000", "#ffe1bf", "#00d957", "#0020f2", "#e60099", "#730f00", "#7f6600", "#336655", "#293aa6", "#a6538a", "#8c4f46", "#e5c339", "#00ffcc", "#333a66", "#40202d", "#f29979", "#fbffbf", "#00b3a7", "#8091ff", "#cc335c", "#594943", "#a3d936", "#003033", "#300059", "#400009", "#cc5200", "#354020", "#39c3e6", "#cbace6", "#d9a3aa", "#7f5940", "#6a8040", "#006fa6", "#cc00ff", "#402910", "#0a4d00", "#566573", "#83008c")
#n <- 41
#qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
#col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
#pie(rep(1,n), col=sample(pal4, n))
#pal4 <- sample(col_vector,n)
#cols_micro <- colorRampPalette(brewer.pal(12, "Set3"))
#cols_func <- colorRampPalette(brewer.pal(8, "Set2"))
#cols_food <- colorRampPalette(brewer.pal(8, "Dark2"))
# import average microbime per person for clustering
microbes <- read.delim("data/processed_UN_tax/UN_taxonomy_norm_s.txt", row = 1)
# create normalized sqrt relative abundance
# this is what we display in the figure, so we cluster using these values
microbes.sq <- sweep(sqrt(microbes), 2, colSums(sqrt(microbes)), "/")
# create distance matrix for clustering
# should update this to what ever method I end up using in the paper (euclidean for clr, but should use a tree method with relative abundance data)
mydist <- vegdist(t(microbes.sq), method = "bray")
myclust <- hclust(mydist, method = "average")
order <- myclust$order
microbes <- microbes[,order]
ord_factor <- as.character(colnames(microbes))
# save the sim.order - might not need to do this
#save(sim.order, file = "data/order_by_similaritiy.RData")
## Quick visual look at the visual clustering
# plot(myclust);groups <- cutree(myclust, k=3);rect.hclust(myclust, k=3, border = "red")
# create dendrogram of clustering
dend <- as.dendrogram(myclust)
# munging for plotting
ddata <- dendro_data(dend, type = "rectangle")
labs <- label(ddata)
# change class to prevent warning when joining
labs$label<- as.character(labs$label)
map_username$UserName <- as.character(map_username$UserName)
# add map information for plotting
labs <- inner_join(labs, map_username, by = c("label"="UserName" ))
labs$label <- gsub("MCTs", "", labs$label)
# plot dendrogram
dend_plot <- ggplot(segment(ddata)) +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_label(data=labs, aes(label=label, x =x, y=0, hjust = 0.5, vjust =1, fill = labs$Supplement), size = 3) +
scale_fill_manual(values = c("#e66101","#5e3c99")) +
ylim(-0.25, 0.5) +
theme_dendro() +
theme(legend.position = c(0.5,0.2),
legend.direction = "horizontal",
legend.title = element_blank())
dend_plot
# import microbiome data
taxa <- read.table("data/processed_tax/taxonomy_norm_s.txt", header = T, row.names = 1, sep = "\t", comment = "")
#readjust for plotting
#taxa = sweep(sqrt(taxa),2,colSums(sqrt(taxa)),'/')
taxa = sweep(taxa, 2, colSums(taxa),'/')
# for plotting, limit to top ~20 bugs
taxa = taxa[rowMeans(taxa) >= 0.0047,]
# sort by highest average relative abundance
taxa <- taxa[order(rowMeans(taxa), decreasing = F),]
# make tax ordering factor
tax_ord_factor <- as.character(rownames(taxa))
plot <- as.data.frame(t(taxa))
plot <- rownames_to_column(plot, var = "X.SampleID")
plot <- melt(plot, id = "X.SampleID", variable.name = "Species")
# Check there are no duplicates/sum all of the same species for the same person
plot <- plot %>% group_by(X.SampleID, Species) %>% dplyr::summarise(newvalue = sum(value))
# create other category for plotting
other <- plot %>% group_by(X.SampleID) %>% dplyr::summarise(newvalue = 1- sum(newvalue))
other$Species <- "Other"
other <- other %>% select(X.SampleID, Species, newvalue)
# before we can join the two dfs with rbind must change from tbl dataframe caused by dplyr
plot <- as.data.frame(plot)
other <- as.data.frame(other)
# join for plotting
plot <- as.data.frame(rbind(plot,other))
# fix labeling for plotting
plot$Species <- gsub("?.*s__", "", plot$Species)
plot$Species <- gsub("?.*g__", "Uncl. Genus ", plot$Species)
plot$Species <- gsub("?.*f__", "Uncl. Family ", plot$Species)
plot$Species <- gsub("?.*o__", "Uncl. Order ", plot$Species)
plot$Species <- gsub(";NA", "", plot$Species)
# merge with map to get day variable
plot <- merge(plot, map, by = "X.SampleID")
plot$StudyDayNo <- as.numeric(plot$StudyDayNo)
# get right number of colors for plotting
no_cols <- length(unique(plot$Species))
colors_micro <-pal[1:no_cols]
# order participants by their microbiome diversity
# reorder by ordered factor
plot$UserName <- gsub("MCTs", "", plot$UserName)
ord_factor <- gsub("MCTs", "", ord_factor)
plot$UserName <- factor(plot$UserName, levels = ord_factor)
# reorder food species and clean up naming for the ordering
tax_ord_factor <- gsub("?.*s__", "", tax_ord_factor)
tax_ord_factor <- gsub("?.*g__", "Uncl. Genus ", tax_ord_factor)
tax_ord_factor <- gsub("?.*f__", "Uncl. Family ", tax_ord_factor)
tax_ord_factor <- gsub("?.*o__", "Uncl. Order ", tax_ord_factor)
tax_ord_factor <- gsub(";NA", "", tax_ord_factor)
tax_ord_factor <- c("Other", tax_ord_factor)
plot$Species <- as.factor(plot$Species)
plot$Species <-factor(plot$Species, levels = tax_ord_factor)
# plot as area plot
micro_plot <- ggplot(data = plot, aes(x=StudyDayNo, y = newvalue, fill=Species)) +
geom_area(stat = "identity") +
facet_grid(.~UserName, scales = "free") +
scale_fill_manual(values = colors_micro) +
scale_x_discrete(drop = FALSE) +
theme_classic() +
theme(strip.text.x = element_text(angle = 0, size = 6, face = "italic"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(size = 9),
axis.title = element_text(size = 9),
plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
strip.background = element_rect(color = "grey"),
legend.position = "bottom",
legend.text = element_text(size = 7),
legend.title = element_blank(),
panel.spacing.x=unit(0.05, "lines")) +
guides(fill = guide_legend(reverse = FALSE,
keywidth = 0.5,
keyheight = 0.5,
ncol = 1)) +
#nrow = 5)) + # for full page
#nrow = 3)) + # for slide
ylab("Relative Abundance")
#path_map <- read.table("raw/functional/Kegg_ID_Map_plus.txt", sep = "\t", header = T, comment = "")
# import microbiome data for function
modules <- read.table("data/processed_KEGG/preprocessed_KEGG_modules.txt_filtered", header = T, row.names = 1, sep = "\t", comment = "")
#readjust for plotting (don't know how to do with CLR data)
#modules = sweep(sqrt(modules),2,colSums(sqrt(modules)),'/')
modules = sweep(modules,2,colSums(modules), '/')
# sort by highest average relative abundance
modules <- modules[order(rowMeans(modules), decreasing = F),]
# make tax ordering factor
mod_ord_factor <- as.character(rownames(modules))
plot2 <- as.data.frame(t(modules))
plot2 <- rownames_to_column(plot2, var = "X.SampleID")
plot2 <- melt(plot2, id = "X.SampleID", variable.name = "Modules")
# combine all "<x% abundance" foods into one for ploting
plot2 <- plot2 %>% group_by(X.SampleID, Modules) %>% dplyr::summarise(newvalue = sum(value))
# merge with map to get day variable
plot2 <- merge(plot2, map, by = "X.SampleID")
set.seed(1)
# get right number of colors for plotting
no_cols <- length(unique(plot2$Modules))
#colors_func <- sample(cols_func(no_cols))
colors_func <- sample(pal, no_cols)
# order participants by their microbiome diversity
# reorder by ordered factor
plot2$UserName <- gsub("MCTs", "", plot2$UserName)
plot2$UserName <- factor(plot2$UserName, levels = ord_factor)
# reorder modules
plot2$Modules <- as.factor(plot2$Modules)
plot2$Modules <-factor(plot2$Modules, levels = mod_ord_factor)
# plot2 <- merge(plot2, path_map, by.x = "Modules", by.y = "Shogun_ID")
# plot2$KEGG_Label <- gsub(" \\[.*$", "", plot2$KEGG_Label)
# plot2$KEGG_Label <- gsub("M..... ", "", plot2$KEGG_Label)
soylents2 <- subset(plot2,UserName == c('11', '12'))
soylents2 <- soylents2[!duplicated(soylents2$UserName),]
# make the plot2
func_plot <- ggplot(data = plot2, aes(x=StudyDayNo, y = newvalue, fill=Modules)) +
geom_area(stat = "identity") +
facet_grid(.~UserName, scales = "free") +
scale_fill_manual(values = colors_func) +
scale_x_discrete(drop = FALSE) +
theme_classic() +
theme(strip.text.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(size = 9),
axis.title = element_text(size = 9),
plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
strip.background = element_blank(),
legend.position = "bottom",
legend.text = element_text(size = 7),
legend.title = element_blank(),
panel.spacing.x=unit(0.05, "lines")) +
guides(fill = guide_legend(reverse = FALSE,
keywidth = 0.5,
keyheight = 0.5,
ncol = 1)) +
#nrow = 5)) +
ylab("Relative Abundance")
# import diet data
food <- read.table("data/processed_food/dhydrt.txt", header = T, sep = "\t", comment = "", row.names = "taxonomy")
food <- food[, !(colnames(food) == "X.FoodID")]
# collapse at level 2
# Summarizing at different levels - makes changes to everything downstream
split <- strsplit(rownames(food),";")             # Split and rejoin on lv7 to get species level
foodStrings <- sapply(split,function(x) paste(x[1:1],collapse=";"))
food<- rowsum(food,foodStrings)              # Collapse by taxonomy name
# sqrt relative abundance
food.n <- sweep(sqrt(food),2,colSums(sqrt(food)),'/')
# drop to top 20 ish foods
food <- food[rowMeans(food.n) > 0.015,]
# how many unique foods?
# length(unique(rownames(food)))
# relative abundance
#food <- sweep(sqrt(food), 2, colSums(sqrt(food)), '/')
food <- sweep(food, 2, colSums(food), '/')
# sort by highest average relative abundance
food <- food[order(rowMeans(food), decreasing = F),]
# make food ordering factor
food_ord_factor <- as.character(rownames(food))
plot3 <- as.data.frame(t(food))
plot3 <- rownames_to_column(plot3, var = "X.SampleID")
plot3 <- melt(plot3, id = "X.SampleID", variable.name = "Food")
# combine all "<x% abundance" foods into one for plotting
plot3 <- plot3 %>% group_by(X.SampleID, Food) %>% dplyr::summarise(newvalue = sum(value))
# fix labeling for plotting
plot3$Food <- gsub(".*L1_", " ", plot3$Food)
plot3$Food <- gsub("_", " ", plot3$Food)
# merge with map to get day variable
plot3 <- merge(plot3, map, by = "X.SampleID")
# set seed to get nice colors
set.seed(3)
# get right number of colors for plotting
no_cols <- length(unique(plot3$Food))
#colors_food <- sample(cols_food(no_cols))
# old colors: "#f29d3d", "#e200f2", "#00a2f2", "#e51f00", "#00cc00", "#eeff00", "#995426", "#e5b409", "#D3D3D3"
##TODO fix the color of meats/milks
colors_food <- rev(c("#fe9700",
"#c91acb",
"#00a2f2",
"#d43f1f",
"#5dd047",
"#ffff59",
"#662a00",
"#a8863a",
"#737373"))
# order participants by their microbiome diversity
# reorder by ordered factor and rename
plot3$UserName <- gsub("MCTs", "", plot3$UserName)
ord_factor <- gsub("MCTs", "", ord_factor)
plot3$UserName <- factor(plot3$UserName, levels = ord_factor)
# reorder food levels
food_ord_factor <- gsub(".*L1_", " ", food_ord_factor)
food_ord_factor <- gsub("_", " ", food_ord_factor)
plot3$Food <- as.factor(plot3$Food)
plot3$Food <-factor(plot3$Food, levels = food_ord_factor)
soylents3 <- subset(plot3,UserName == c('11', '12'))
soylents3 <- soylents3[!duplicated(soylents3$UserName),]
# make the plot
food_plot<-ggplot(data = plot3, aes(x=StudyDayNo, y = newvalue, fill=Food)) +
geom_area(stat = "identity") +
facet_grid(.~UserName, scales = "free") +
scale_fill_manual(values = colors_food) +
scale_x_discrete(drop = FALSE) +
theme_classic() +
theme(strip.text.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(size = 9),
axis.title = element_text(size = 9),
plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
strip.background = element_blank(),
legend.position = "bottom",
legend.text = element_text(size = 7),
legend.title = element_blank(),
panel.spacing.x=unit(0.05, "lines")) +
guides(fill = guide_legend(reverse = FALSE,
keywidth = 0.5,
keyheight = 0.5,
ncol = 1)) +
#nrow = 5)) + # for full page figure
#nrow = 1)) + # for slide figure
ylab("Relative Abundance")
# xlab("Study Day") +
#ggtitle("Dietary Intake of Subjects by Day - ordered by average dietary similarity")
# load nutrition intake for each person
nutr <- as.data.frame(t(read.delim("data/processed_nutr/nutr_65.txt", row.names = 1, sep = "\t", comment = "")))
# this table already has everything in grams so it's ready to use to plot normalized grams for macro and micronutrients
plot4 <- nutr %>% select(-c(KCAL, MOIS,
SFAT, S040, S060, S080, S100, S120, S140, S160, S180,
MFAT, M161, M181, M201, M221,
PFAT, P182, P183, P184, P204, P205, P225, P226))
plot4$CARB <- plot4$CARB-plot4$SUGR
plot4 <- t(plot4)
# normalize
plot4 <- sweep(sqrt(plot4),2,colSums(sqrt(plot4)),'/')
#plot4 <- sweep(plot4,2,colSums(plot4),'/')
# load data dictionary to change names
dict <- read.delim("raw/Uncleaned_diet/Data_Dictionary/DataDictionary_ITEMS.txt", stringsAsFactors = F)
dict <- dict[colnames(dict) == c("Field.Name", "Description")]
dict$Field.Name <- gsub(" ", "", dict$Field.Name )
dict <- dict[(dict$Field.Name) %in% rownames(plot4),]
rownames(plot4) <- dict$Description
rownames(plot4) <- gsub(" \\(mcg\\) ", "", rownames(plot4))
rownames(plot4) <- gsub(" \\(mg\\) ", "", rownames(plot4))
rownames(plot4) <- gsub(" \\(g\\) ", "", rownames(plot4))
rownames(plot4) <- gsub(" \\(mg\\)", "", rownames(plot4))
rownames(plot4) <- gsub(" \\(mcg\\)", "", rownames(plot4))
rownames(plot4) <- gsub(" \\(mcg_RAE\\) ", "", rownames(plot4))
rownames(plot4) <- gsub(" \\(mcg_DFE\\)", "", rownames(plot4))
rownames(plot4) <- gsub(", DFE", "", rownames(plot4))
rownames(plot4) <- gsub(", RAE", "", rownames(plot4))
# sort by highest average relative abundance
plot4 <- plot4[order(rowMeans(plot4), decreasing = F),]
plot4 <- as.data.frame(t(plot4))
plot4 <- rownames_to_column(plot4, var = "X.SampleID")
plot4 <- melt(plot4, id = "X.SampleID", variable.name = "Nutrient")
# combine all "<x% abundance" foods into one for plotting
plot4 <- plot4 %>% group_by(X.SampleID, Nutrient) %>% dplyr::summarise(newvalue = sum(value))
# merge with map to get day variable
plot4 <- merge(plot4, map, by = "X.SampleID")
# order participants by their microbiome diversity
# reorder by ordered factor and rename
plot4$UserName <- gsub("MCTs", "", plot4$UserName)
ord_factor <- gsub("MCTs", "", ord_factor)
plot4$UserName <- factor(plot4$UserName, levels = ord_factor)
soylents4 <- subset(plot4,UserName == c('11', '12'))
soylents4 <- soylents4[!duplicated(soylents4$UserName),]
no_cols <- length(unique(plot4$Nutrient))
set.seed(2)
colors_nutr <-sample(pal4)[1:no_cols]
# plot kcal filled with % protein, fat, and carb
nutr_plot <- ggplot(data = plot4, aes(x = StudyDayNo, y = newvalue , fill = Nutrient)) +
geom_area(stat = "identity") +
facet_grid(.~UserName, scales = "free") +
scale_fill_manual(values= colors_nutr) +
scale_x_discrete(drop = FALSE) +
theme_classic() +
theme(strip.text.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 9),
axis.title = element_text(size = 9),
plot.title = element_text(hjust = 0.5),
axis.title.x = element_blank(),
strip.background = element_blank(),
legend.position = "bottom",
legend.text = element_text(size = 7),
legend.title = element_blank(),
panel.spacing.x=unit(0.05, "lines")) +
guides(fill = guide_legend(reverse = FALSE,
keywidth = 0.5,
keyheight = 0.5,
ncol = 1)) +
ylab("sqrt(Relative Abundance)")
# TODO: show this figure with all nutrients in grams normalized by total grams consumed per person each day.
# for 0s find smallest non-zero value and set all 0s to half that. That allows to fill in 0s. Then log it to see the values more clearly. IF it's still spiky make sure to be able to explain why (mostly rounding error?).
# combine into one big plot
micro_plot_leg <- get_legend(micro_plot)
func_plot_leg <- get_legend(func_plot)
food_plot_leg <- get_legend(food_plot)
nutr_plot_leg <- get_legend(nutr_plot)
mygrobs <- c(single_nutr[c(22,23)])
grid.arrange(grobs =mygrobs, nrow=2)
grid.arrange(grobs =mygrobs, nrow=1)
knitr::opts_knit$get("rmarkdown.pandoc.to")knitr::opts_knit$get("rmarkdown.pandoc.to")
knitr::opts_knit$get("rmarkdown.pandoc.to")
